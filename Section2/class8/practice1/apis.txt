The fetch() method in JavaScript is a modern way to retrieve resources from a server. It provides a Promise-based API for making network requests and is commonly used to fetch data from various sources, such as APIs. Unlike older methods like XMLHttpRequest, fetch() is simpler and integrates more naturally with promises and asynchronous operations.

Key Concepts of fetch()
Returns a Promise: The fetch() method returns a Promise that resolves to a Response object. This Response object represents the server's response and provides methods to handle data in various formats, like JSON, text, or blob.
Asynchronous Data Handling: Promises allow the handling of asynchronous data fetching without blocking the main thread, which enhances performance and user experience.
Advanced HTTP Features: fetch() supports features like Cross-Origin Resource Sharing (CORS), making it a versatile tool for web development and improving security through controlled access.
Syntax of fetch():
fetch('url', [options])
Parameters:
URL: The endpoint URL to which the request will be sent.
Options: This optional object contains properties to configure the request.
Options for fetch()
Method: Defines the HTTP method (e.g., GET, POST, PUT, DELETE) for the request.
Headers: An object specifying any headers to be sent with the request, such as Content-Type to specify the data format.
Body: For POST or PUT requests, body holds the data payload. It should be a stringified format, such as JSON, if sending JSON data.
Mode: Defines the request mode. Common values include:
cors: Allows cross-origin requests.
no-cors: Limits the request to simple requests without certain headers or JavaScript access to the response.
same-origin: Ensures the request only works if it's made to the same origin.
Credentials: Determines whether credentials like cookies or authorization headers should be included with the request. Options are:
omit: No credentials are included.
same-origin: Only sends credentials for requests to the same origin.
include: Always includes credentials, even for cross-origin requests (with CORS approval).
AbortController and AbortSignal
To cancel a fetch() request, the AbortController and AbortSignal interfaces are used:

AbortController: Creates a signal that can be used to abort the fetch request.
AbortSignal: The signal associated with the controller is passed as an option in fetch() to manage timeouts or user-triggered aborts.
Including Credentials
To include cookies or authorization headers, set credentials to "include".
For sending credentials only within the same origin, use "same-origin".
Browser Support
The Fetch API is an ECMAScript6 (ES6) feature and is supported in modern browsers such as:

Google Chrome
Edge
Firefox
Opera
Safari